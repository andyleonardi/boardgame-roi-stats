{"ast":null,"code":"var _jsxFileName = \"/Users/andyleonardi/Downloads/GA_course/Project 2 - Boardgames ROI Analytics/boardgame-roi-stats/src/pages/Analytics.jsx\";\nimport Header from \"../components/Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Analytics = props => {\n  const cardFunctions = (arrayObj, whatFunction) => {\n    let numGames = arrayObj.length;\n    let totalDamage = arrayObj.reduce((damage, element) => damage + element.buyprice, 0);\n    let totalHeal = arrayObj.reduce((damage, element) => damage + element.sellprice, 0);\n    let netDamage = totalDamage - totalHeal;\n    let totalPlays = arrayObj.reduce((damage, element) => damage + element.playcount, 0);\n\n    // For month calculation\n    let initialPurchaseDate = arrayObj[0].buydate;\n    let maxBuyDate = arrayObj.reduce((maxDate, element) => maxDate > element.buydate ? maxDate : element.buydate, initialPurchaseDate);\n    let minBuyDate = arrayObj.reduce((minDate, element) => minDate < element.buydate ? minDate : element.buydate, initialPurchaseDate);\n    console.log(\"min date \", minBuyDate, \" max date \", maxBuyDate);\n    let getMaxMth = new Date(maxBuyDate).getMonth();\n    let getMinMth = new Date(minBuyDate).getMonth();\n    let getMaxYear = new Date(maxBuyDate).getFullYear();\n    let getMinYear = new Date(minBuyDate).getFullYear();\n    console.log(getMaxMth, getMaxYear, getMinMth, getMinYear);\n    let mthLength = getMaxMth - getMinMth + 12 * (getMaxYear - getMinYear);\n    if (whatFunction === \"totalGamesOwned\") {\n      return numGames;\n    } else if (whatFunction === \"dmgPerGame\") {\n      return numGames > 0 ? netDamage / numGames : Infinity;\n    } else if (whatFunction === \"dmgPerPlay\") {\n      return totalPlays > 0 ? netDamage / totalPlays : Infinity;\n    } else if (whatFunction === \"dmgPerMonth\") {\n      return mthLength > 0 ? netDamage / mthLength : Infinity;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"analytics-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"analytics-cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cards\",\n          id: \"all-games-owned\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Total Games Owned\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: cardFunctions(props.allGames, \"totalGamesOwned\").toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cards\",\n          id: \"dmg-per-game\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Damage / Game: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"$\", cardFunctions(props.allGames, \"dmgPerGame\").toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cards\",\n          id: \"dmg-per-mth\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Average Monthly Damage: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"$\", cardFunctions(props.allGames, \"dmgPerMonth\").toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cards\",\n          id: \"dmg-per-play\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Damage / Play: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"$\", cardFunctions(props.allGames, \"dmgPerPlay\").toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"analytics-charts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_c = Analytics;\nexport default Analytics;\nvar _c;\n$RefreshReg$(_c, \"Analytics\");","map":{"version":3,"names":["Header","jsxDEV","_jsxDEV","Analytics","props","cardFunctions","arrayObj","whatFunction","numGames","length","totalDamage","reduce","damage","element","buyprice","totalHeal","sellprice","netDamage","totalPlays","playcount","initialPurchaseDate","buydate","maxBuyDate","maxDate","minBuyDate","minDate","console","log","getMaxMth","Date","getMonth","getMinMth","getMaxYear","getFullYear","getMinYear","mthLength","Infinity","children","fileName","_jsxFileName","lineNumber","columnNumber","className","id","allGames","toFixed","_c","$RefreshReg$"],"sources":["/Users/andyleonardi/Downloads/GA_course/Project 2 - Boardgames ROI Analytics/boardgame-roi-stats/src/pages/Analytics.jsx"],"sourcesContent":["import Header from \"../components/Header\";\n\nconst Analytics = (props) => {\n  const cardFunctions = (arrayObj, whatFunction) => {\n    let numGames = arrayObj.length;\n    let totalDamage = arrayObj.reduce(\n      (damage, element) => damage + element.buyprice,\n      0\n    );\n    let totalHeal = arrayObj.reduce(\n      (damage, element) => damage + element.sellprice,\n      0\n    );\n    let netDamage = totalDamage - totalHeal;\n    let totalPlays = arrayObj.reduce(\n      (damage, element) => damage + element.playcount,\n      0\n    );\n\n    // For month calculation\n    let initialPurchaseDate = arrayObj[0].buydate;\n    let maxBuyDate = arrayObj.reduce(\n      (maxDate, element) =>\n        maxDate > element.buydate ? maxDate : element.buydate,\n      initialPurchaseDate\n    );\n    let minBuyDate = arrayObj.reduce(\n      (minDate, element) =>\n        minDate < element.buydate ? minDate : element.buydate,\n      initialPurchaseDate\n    );\n    console.log(\"min date \", minBuyDate, \" max date \", maxBuyDate);\n\n    let getMaxMth = new Date(maxBuyDate).getMonth();\n    let getMinMth = new Date(minBuyDate).getMonth();\n    let getMaxYear = new Date(maxBuyDate).getFullYear();\n    let getMinYear = new Date(minBuyDate).getFullYear();\n    console.log(getMaxMth, getMaxYear, getMinMth, getMinYear);\n\n    let mthLength = getMaxMth - getMinMth + 12 * (getMaxYear - getMinYear);\n\n    if (whatFunction === \"totalGamesOwned\") {\n      return numGames;\n    } else if (whatFunction === \"dmgPerGame\") {\n      return numGames > 0 ? netDamage / numGames : Infinity;\n    } else if (whatFunction === \"dmgPerPlay\") {\n      return totalPlays > 0 ? netDamage / totalPlays : Infinity;\n    } else if (whatFunction === \"dmgPerMonth\") {\n      return mthLength > 0 ? netDamage / mthLength : Infinity;\n    }\n  };\n\n  return (\n    <div>\n      <Header />\n      <div className=\"analytics-container\">\n        <div className=\"analytics-cards\">\n          <div className=\"cards\" id=\"all-games-owned\">\n            <h3>Total Games Owned</h3>\n            <p>{cardFunctions(props.allGames, \"totalGamesOwned\").toFixed(2)}</p>\n          </div>\n          <div className=\"cards\" id=\"dmg-per-game\">\n            <p>Damage / Game: </p>\n            <p>${cardFunctions(props.allGames, \"dmgPerGame\").toFixed(2)}</p>\n          </div>\n          <div className=\"cards\" id=\"dmg-per-mth\">\n            <p>Average Monthly Damage: </p>\n            <p>${cardFunctions(props.allGames, \"dmgPerMonth\").toFixed(2)}</p>\n          </div>\n          <div className=\"cards\" id=\"dmg-per-play\">\n            <p>Damage / Play: </p>\n            <p>${cardFunctions(props.allGames, \"dmgPerPlay\").toFixed(2)}</p>\n          </div>\n        </div>\n      </div>\n      <div className=\"analytics-charts\">\n      </div>\n    </div>\n  );\n};\n\nexport default Analytics;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}