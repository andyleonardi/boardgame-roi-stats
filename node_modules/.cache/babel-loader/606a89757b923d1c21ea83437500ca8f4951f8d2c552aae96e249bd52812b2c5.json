{"ast":null,"code":"var _jsxFileName = \"/Users/andyleonardi/Downloads/GA_course/Project 2 - Boardgames ROI Analytics/boardgame-roi-stats/src/App.js\",\n  _s = $RefreshSig$();\n// Import packages & hooks\nimport { Routes, Route, Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { xml2js } from \"xml-js\";\n\n// Import components\nimport Header from \"./components/Header\";\nimport Homepage from \"./pages/Homepage\";\nimport Collections from \"./pages/Collections\";\nimport Analytics from \"./pages/Analytics\";\nimport Forms from \"./pages/Forms\";\nimport gamesArr from \"./gameCollection\";\nimport testAppArr from \"./testAppData\";\nimport testBggArr from \"./testAPIData\";\n\n// Import styles\nimport \"./App.css\";\n\n// BGG API Paths\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bggCollectionPath = \"https://api.geekdo.com/xmlapi/collection/\"; // for getting collections\n\n// Function to extract relevant API data\nconst extractRelevantData = obj => {\n  let ownStatus = \"\";\n  if (obj.status._own === 1) {\n    ownStatus = \"Own\";\n  } else if (obj.status._prevowned === 1) {\n    ownStatus = \"Previously Owned\";\n  } else if (obj.status._preordered === 1) {\n    ownStatus = \"Pre-ordered\";\n  }\n  return {\n    name: obj.name._text,\n    playcount: obj.numplays._text,\n    gameID: obj._attributes.objectid,\n    status: ownStatus\n  };\n};\nfunction App() {\n  _s();\n  const [bggUserId, setBggUserId] = useState(\"andyleonardi\");\n  const [userBGGData, setUserBGGData] = useState([]);\n  let inputRequiredRecords = [];\n  /*\n  // Try to mount API first, but for working version only pull API data when user submit form\n  useEffect(() => {\n    // Because I only want to pull games users buy, I need to pull 3 separate times\n    // Once for Own, second for Previously Owned, third for Preordered\n    // This is because BGG user collection data includes even games that you've never purchased,\n    // but which you've logged as Played, or you've Commented on, etc\n    // Since I only want actual purchases and user's own collection\n    // I needed to only get these 3\n    const collectionPathOwn = `${bggCollectionPath}${bggUserId}?own=1&excludesubtype=boardgameexpansion`;\n    const collectionPathPrevOwn = `${bggCollectionPath}${bggUserId}?prevowned=1&excludesubtype=boardgameexpansion`;\n    const collectionPathPreOrder = `${bggCollectionPath}${bggUserId}?preordered=1&excludesubtype=boardgameexpansion`;\n     console.log(collectionPathOwn);\n     const fetchBGGCollectionData = async () => {\n      const responseOwn = await fetch(collectionPathOwn);\n      const responsePrevOwn = await fetch(collectionPathPrevOwn);\n      const responsePreOrder = await fetch(collectionPathPreOrder);\n       const xmlDataOwn = await responseOwn.text();\n      const xmlDataPrevOwn = await responsePrevOwn.text();\n      const xmlDataPreOrder = await responsePreOrder.text();\n       const dataOwn = xml2js(xmlDataOwn, { compact: true, spaces: 4 }).items;\n      const dataPrevOwn = xml2js(xmlDataPrevOwn, { compact: true, spaces: 4 }).items.item;\n      const dataPreOrder = xml2js(xmlDataPreOrder, { compact: true, spaces: 4 }).items.item;\n      console.log(\"Currently owned: \", dataOwn);\n      // console.log(\"Preordered: \", dataPreOrder);\n       // Now that we have the collection data from API, we want to get just the relevant fields\n      // We want Name, Status and Numplay\n      const reducedOwn = dataOwn.map(\n        ({ name, numplays, status, _attributes }) =>\n          extractRelevantData({ name, numplays, status, _attributes })\n      );\n      const reducedPrevOwn = dataPrevOwn.map(\n        ({ name, numplays, status, _attributes }) =>\n          extractRelevantData({ name, numplays, status, _attributes })\n      );\n      const reducedPreOrder = dataPreOrder.map(\n        ({ name, numplays, status, _attributes }) =>\n          extractRelevantData({ name, numplays, status, _attributes })\n      );\n      const reducedAll = reducedOwn.concat(reducedPrevOwn).concat(reducedPreOrder);\n      console.log(reducedAll);\n       // setUserBGGData(reducedAll);\n       // dataOwn.items.item.forEach((e)=>{console.log(`Name: ${e.name._text}, # plays: ${e.numplays._text}. GameID = ${e._attributes.objectid}`)});\n      // console.log(dataPreOrder);\n    };\n     fetchBGGCollectionData();\n  }, [bggUserId]);\n  */\n\n  // console.log(userBGGData);\n\n  const handleSyncButton = () => {\n    console.log(\"Sync button pressed\");\n    // test arrays testAppArr & testBggArr\n    console.log(\"Test app saved data: \", testAppArr);\n    console.log(\"Test API data: \", testBggArr);\n\n    // This function will need to do the following:\n    // First it will need to compare boardgame names in both arrays, then:\n    // 1. For any records that is in userBGGData that is not in app data,\n    //    add them to app data (this will only take the following obj keys:\n    //    name, status, playcount)\n    //    NOTE: when we compare, we are only interested in getting records in\n    //          userBGGData, and not the other way because theoretically,\n    //          app data should have been synced to the last userBGGData\n    let newRecords = testBggArr.filter(({\n      name: record1\n    }) => !testAppArr.some(({\n      name: record2\n    }) => record2 === record1));\n    newRecords.forEach(element => {\n      element.buydate = null;\n      element.buyprice = null;\n      element.selldate = null;\n      element.sellprice = null;\n    });\n    // console.log(newRecords);\n\n    // 2. [OLD] For all matching records (name), update both status & playcount\n    //    [OLD] in app's data with the data from userBGGData\n    // 2. Get all matching name, but different status, i.e. we want to get \n    //    games that were sold between syncs (bgg status = prevowned & app status = own)\n    let updateRecords = testAppArr.filter(({\n      name: record1,\n      status: stat1\n    }) => testBggArr.some(({\n      name: record2,\n      status: stat2\n    }) => record2 === record1 & stat1 !== stat2 & stat2 === \"Previously Owned\"));\n    updateRecords.forEach(element => {\n      element.status = \"Previously Owned\";\n    });\n    // console.log(updateRecords);\n\n    inputRequiredRecords = newRecords.concat(updateRecords);\n    // console.log(inputRequiredRecords);\n\n    // The above 2 arrays will contain everything that has changed between syncs\n    // 1) new games, 2) sold games\n    // We will update playcount at a later stage\n\n    // Then open / Link to Forms component where it takes the combined array\n    // and get user to input forms\n\n    console.log(inputRequiredRecords);\n\n    // This will update the values in our app data array\n    // Then, run through new data array.\n    // If there is any missing purchase data, add it to a new array\n    // If there is any missing sell data AND status = prevowned, add it to a new array\n\n    // Finally, Link to Forms component where we will have these new records\n    // and allow user to input values to them\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Homepage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/collections\",\n          element: /*#__PURE__*/_jsxDEV(Collections, {\n            allGames: gamesArr,\n            handleSyncButton: handleSyncButton\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/form\",\n          element: /*#__PURE__*/_jsxDEV(Forms, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/analytics\",\n          element: /*#__PURE__*/_jsxDEV(Analytics, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WBHYRmovNqlGlM7fOvgECv5sCWo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Routes","Route","Link","useEffect","useState","xml2js","Header","Homepage","Collections","Analytics","Forms","gamesArr","testAppArr","testBggArr","jsxDEV","_jsxDEV","bggCollectionPath","extractRelevantData","obj","ownStatus","status","_own","_prevowned","_preordered","name","_text","playcount","numplays","gameID","_attributes","objectid","App","_s","bggUserId","setBggUserId","userBGGData","setUserBGGData","inputRequiredRecords","handleSyncButton","console","log","newRecords","filter","record1","some","record2","forEach","element","buydate","buyprice","selldate","sellprice","updateRecords","stat1","stat2","concat","className","children","path","fileName","_jsxFileName","lineNumber","columnNumber","allGames","_c","$RefreshReg$"],"sources":["/Users/andyleonardi/Downloads/GA_course/Project 2 - Boardgames ROI Analytics/boardgame-roi-stats/src/App.js"],"sourcesContent":["// Import packages & hooks\nimport { Routes, Route, Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { xml2js } from \"xml-js\";\n\n// Import components\nimport Header from \"./components/Header\";\nimport Homepage from \"./pages/Homepage\";\nimport Collections from \"./pages/Collections\";\nimport Analytics from \"./pages/Analytics\";\nimport Forms from \"./pages/Forms\";\nimport gamesArr from \"./gameCollection\";\n\nimport testAppArr from \"./testAppData\";\nimport testBggArr from \"./testAPIData\";\n\n// Import styles\nimport \"./App.css\";\n\n// BGG API Paths\nconst bggCollectionPath = \"https://api.geekdo.com/xmlapi/collection/\"; // for getting collections\n\n// Function to extract relevant API data\nconst extractRelevantData = (obj) => {\n  let ownStatus = \"\";\n\n  if (obj.status._own === 1) {\n    ownStatus = \"Own\";\n  } else if (obj.status._prevowned === 1) {\n    ownStatus = \"Previously Owned\";\n  } else if (obj.status._preordered === 1) {\n    ownStatus = \"Pre-ordered\";\n  }\n\n  return {\n    name: obj.name._text,\n    playcount: obj.numplays._text,\n    gameID: obj._attributes.objectid,\n    status: ownStatus,\n  };\n};\n\nfunction App() {\n  const [bggUserId, setBggUserId] = useState(\"andyleonardi\");\n  const [userBGGData, setUserBGGData] = useState([]);\n  let inputRequiredRecords = [];\n  /*\n  // Try to mount API first, but for working version only pull API data when user submit form\n  useEffect(() => {\n    // Because I only want to pull games users buy, I need to pull 3 separate times\n    // Once for Own, second for Previously Owned, third for Preordered\n    // This is because BGG user collection data includes even games that you've never purchased,\n    // but which you've logged as Played, or you've Commented on, etc\n    // Since I only want actual purchases and user's own collection\n    // I needed to only get these 3\n    const collectionPathOwn = `${bggCollectionPath}${bggUserId}?own=1&excludesubtype=boardgameexpansion`;\n    const collectionPathPrevOwn = `${bggCollectionPath}${bggUserId}?prevowned=1&excludesubtype=boardgameexpansion`;\n    const collectionPathPreOrder = `${bggCollectionPath}${bggUserId}?preordered=1&excludesubtype=boardgameexpansion`;\n\n    console.log(collectionPathOwn);\n\n    const fetchBGGCollectionData = async () => {\n      const responseOwn = await fetch(collectionPathOwn);\n      const responsePrevOwn = await fetch(collectionPathPrevOwn);\n      const responsePreOrder = await fetch(collectionPathPreOrder);\n\n      const xmlDataOwn = await responseOwn.text();\n      const xmlDataPrevOwn = await responsePrevOwn.text();\n      const xmlDataPreOrder = await responsePreOrder.text();\n\n      const dataOwn = xml2js(xmlDataOwn, { compact: true, spaces: 4 }).items;\n      const dataPrevOwn = xml2js(xmlDataPrevOwn, { compact: true, spaces: 4 }).items.item;\n      const dataPreOrder = xml2js(xmlDataPreOrder, { compact: true, spaces: 4 }).items.item;\n      console.log(\"Currently owned: \", dataOwn);\n      // console.log(\"Preordered: \", dataPreOrder);\n\n      // Now that we have the collection data from API, we want to get just the relevant fields\n      // We want Name, Status and Numplay\n      const reducedOwn = dataOwn.map(\n        ({ name, numplays, status, _attributes }) =>\n          extractRelevantData({ name, numplays, status, _attributes })\n      );\n      const reducedPrevOwn = dataPrevOwn.map(\n        ({ name, numplays, status, _attributes }) =>\n          extractRelevantData({ name, numplays, status, _attributes })\n      );\n      const reducedPreOrder = dataPreOrder.map(\n        ({ name, numplays, status, _attributes }) =>\n          extractRelevantData({ name, numplays, status, _attributes })\n      );\n      const reducedAll = reducedOwn.concat(reducedPrevOwn).concat(reducedPreOrder);\n      console.log(reducedAll);\n\n      // setUserBGGData(reducedAll);\n\n      // dataOwn.items.item.forEach((e)=>{console.log(`Name: ${e.name._text}, # plays: ${e.numplays._text}. GameID = ${e._attributes.objectid}`)});\n      // console.log(dataPreOrder);\n    };\n\n    fetchBGGCollectionData();\n  }, [bggUserId]);\n  */\n\n  // console.log(userBGGData);\n\n  const handleSyncButton = () => {\n    console.log(\"Sync button pressed\");\n    // test arrays testAppArr & testBggArr\n    console.log(\"Test app saved data: \", testAppArr);\n    console.log(\"Test API data: \", testBggArr);\n\n    // This function will need to do the following:\n    // First it will need to compare boardgame names in both arrays, then:\n    // 1. For any records that is in userBGGData that is not in app data,\n    //    add them to app data (this will only take the following obj keys:\n    //    name, status, playcount)\n    //    NOTE: when we compare, we are only interested in getting records in\n    //          userBGGData, and not the other way because theoretically,\n    //          app data should have been synced to the last userBGGData\n    let newRecords = testBggArr.filter(\n      ({ name: record1 }) =>\n        !testAppArr.some(({ name: record2 }) => record2 === record1)\n    );\n    newRecords.forEach((element) => {\n      element.buydate = null;\n      element.buyprice = null;\n      element.selldate = null;\n      element.sellprice = null;\n    });\n    // console.log(newRecords);\n\n    // 2. [OLD] For all matching records (name), update both status & playcount\n    //    [OLD] in app's data with the data from userBGGData\n    // 2. Get all matching name, but different status, i.e. we want to get \n    //    games that were sold between syncs (bgg status = prevowned & app status = own)\n    let updateRecords = testAppArr.filter(({ name: record1, status: stat1 }) =>\n      testBggArr.some(({ name: record2, status: stat2 }) => record2 === record1 & stat1 !== stat2 & stat2 === \"Previously Owned\")\n    );\n    updateRecords.forEach((element) => {\n      element.status = \"Previously Owned\";\n    })\n    // console.log(updateRecords);\n\n    inputRequiredRecords = newRecords.concat(updateRecords);\n    // console.log(inputRequiredRecords);\n\n    // The above 2 arrays will contain everything that has changed between syncs\n    // 1) new games, 2) sold games\n    // We will update playcount at a later stage\n\n    // Then open / Link to Forms component where it takes the combined array\n    // and get user to input forms\n    \n    console.log(inputRequiredRecords);\n\n    // This will update the values in our app data array\n    // Then, run through new data array.\n    // If there is any missing purchase data, add it to a new array\n    // If there is any missing sell data AND status = prevowned, add it to a new array\n\n    // Finally, Link to Forms component where we will have these new records\n    // and allow user to input values to them\n  };\n\n  return (\n    <div className=\"App\">\n      \n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<Homepage />} />\n          <Route\n            path=\"/collections\"\n            element={\n              <Collections\n                allGames={gamesArr}\n                handleSyncButton={handleSyncButton}\n              />\n            }\n          />\n          <Route path=\"/form\" element={<Forms />} />\n          <Route path=\"/analytics\" element={<Analytics />} />\n        </Routes>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA,SAASA,MAAM,EAAEC,KAAK,EAAEC,IAAI,QAAQ,kBAAkB;AACtD,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,MAAM,QAAQ,QAAQ;;AAE/B;AACA,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,WAAW,MAAM,qBAAqB;AAC7C,OAAOC,SAAS,MAAM,mBAAmB;AACzC,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAOC,QAAQ,MAAM,kBAAkB;AAEvC,OAAOC,UAAU,MAAM,eAAe;AACtC,OAAOC,UAAU,MAAM,eAAe;;AAEtC;AACA,OAAO,WAAW;;AAElB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,iBAAiB,GAAG,2CAA2C,CAAC,CAAC;;AAEvE;AACA,MAAMC,mBAAmB,GAAIC,GAAG,IAAK;EACnC,IAAIC,SAAS,GAAG,EAAE;EAElB,IAAID,GAAG,CAACE,MAAM,CAACC,IAAI,KAAK,CAAC,EAAE;IACzBF,SAAS,GAAG,KAAK;EACnB,CAAC,MAAM,IAAID,GAAG,CAACE,MAAM,CAACE,UAAU,KAAK,CAAC,EAAE;IACtCH,SAAS,GAAG,kBAAkB;EAChC,CAAC,MAAM,IAAID,GAAG,CAACE,MAAM,CAACG,WAAW,KAAK,CAAC,EAAE;IACvCJ,SAAS,GAAG,aAAa;EAC3B;EAEA,OAAO;IACLK,IAAI,EAAEN,GAAG,CAACM,IAAI,CAACC,KAAK;IACpBC,SAAS,EAAER,GAAG,CAACS,QAAQ,CAACF,KAAK;IAC7BG,MAAM,EAAEV,GAAG,CAACW,WAAW,CAACC,QAAQ;IAChCV,MAAM,EAAED;EACV,CAAC;AACH,CAAC;AAED,SAASY,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG9B,QAAQ,CAAC,cAAc,CAAC;EAC1D,MAAM,CAAC+B,WAAW,EAAEC,cAAc,CAAC,GAAGhC,QAAQ,CAAC,EAAE,CAAC;EAClD,IAAIiC,oBAAoB,GAAG,EAAE;EAC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAUE;;EAEA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC;IACAD,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE5B,UAAU,CAAC;IAChD2B,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE3B,UAAU,CAAC;;IAE1C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI4B,UAAU,GAAG5B,UAAU,CAAC6B,MAAM,CAChC,CAAC;MAAElB,IAAI,EAAEmB;IAAQ,CAAC,KAChB,CAAC/B,UAAU,CAACgC,IAAI,CAAC,CAAC;MAAEpB,IAAI,EAAEqB;IAAQ,CAAC,KAAKA,OAAO,KAAKF,OAAO,CAC/D,CAAC;IACDF,UAAU,CAACK,OAAO,CAAEC,OAAO,IAAK;MAC9BA,OAAO,CAACC,OAAO,GAAG,IAAI;MACtBD,OAAO,CAACE,QAAQ,GAAG,IAAI;MACvBF,OAAO,CAACG,QAAQ,GAAG,IAAI;MACvBH,OAAO,CAACI,SAAS,GAAG,IAAI;IAC1B,CAAC,CAAC;IACF;;IAEA;IACA;IACA;IACA;IACA,IAAIC,aAAa,GAAGxC,UAAU,CAAC8B,MAAM,CAAC,CAAC;MAAElB,IAAI,EAAEmB,OAAO;MAAEvB,MAAM,EAAEiC;IAAM,CAAC,KACrExC,UAAU,CAAC+B,IAAI,CAAC,CAAC;MAAEpB,IAAI,EAAEqB,OAAO;MAAEzB,MAAM,EAAEkC;IAAM,CAAC,KAAKT,OAAO,KAAKF,OAAO,GAAGU,KAAK,KAAKC,KAAK,GAAGA,KAAK,KAAK,kBAAkB,CAC5H,CAAC;IACDF,aAAa,CAACN,OAAO,CAAEC,OAAO,IAAK;MACjCA,OAAO,CAAC3B,MAAM,GAAG,kBAAkB;IACrC,CAAC,CAAC;IACF;;IAEAiB,oBAAoB,GAAGI,UAAU,CAACc,MAAM,CAACH,aAAa,CAAC;IACvD;;IAEA;IACA;IACA;;IAEA;IACA;;IAEAb,OAAO,CAACC,GAAG,CAACH,oBAAoB,CAAC;;IAEjC;IACA;IACA;IACA;;IAEA;IACA;EACF,CAAC;;EAED,oBACEtB,OAAA;IAAKyC,SAAS,EAAC,KAAK;IAAAC,QAAA,eAElB1C,OAAA;MAAKyC,SAAS,EAAC,WAAW;MAAAC,QAAA,eACxB1C,OAAA,CAACf,MAAM;QAAAyD,QAAA,gBACL1C,OAAA,CAACd,KAAK;UAACyD,IAAI,EAAC,GAAG;UAACX,OAAO,eAAEhC,OAAA,CAACR,QAAQ;YAAAoD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACzC/C,OAAA,CAACd,KAAK;UACJyD,IAAI,EAAC,cAAc;UACnBX,OAAO,eACLhC,OAAA,CAACP,WAAW;YACVuD,QAAQ,EAAEpD,QAAS;YACnB2B,gBAAgB,EAAEA;UAAiB;YAAAqB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpC;QACF;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC,eACF/C,OAAA,CAACd,KAAK;UAACyD,IAAI,EAAC,OAAO;UAACX,OAAO,eAAEhC,OAAA,CAACL,KAAK;YAAAiD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC1C/C,OAAA,CAACd,KAAK;UAACyD,IAAI,EAAC,YAAY;UAACX,OAAO,eAAEhC,OAAA,CAACN,SAAS;YAAAkD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC9B,EAAA,CA/IQD,GAAG;AAAAiC,EAAA,GAAHjC,GAAG;AAiJZ,eAAeA,GAAG;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}