{"ast":null,"code":"var _jsxFileName = \"/Users/andyleonardi/Downloads/GA_course/Project 2 - Boardgames ROI Analytics/boardgame-roi-stats/src/pages/Analytics.jsx\";\nimport Header from \"../components/Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Analytics = props => {\n  const cardFunctions = (arrayObj, whatFunction) => {\n    let numGames = arrayObj.length;\n    let totalDamage = arrayObj.reduce((damage, element) => damage + element.buyprice, 0);\n    let totalHeal = arrayObj.reduce((damage, element) => damage + element.sellprice, 0);\n    let netDamage = totalDamage - totalHeal;\n    let totalPlays = arrayObj.reduce((damage, element) => damage + element.playcount, 0);\n\n    // For month calculation\n    let initialPurchaseDate = arrayObj[0].buydate;\n    let maxBuyDate = arrayObj.reduce((maxDate, element) => maxDate > element.buydate ? maxDate : element.buydate, initialPurchaseDate);\n    let minBuyDate = arrayObj.reduce((minDate, element) => minDate > element.buydate ? minDate : element.buydate, initialPurchaseDate);\n    let mthLength = new Date(maxBuyDate).getMonth() - new Date(minBuyDate).getMonth() + 12 * (new Date(maxBuyDate).getFullYear() - new Date(minBuyDate).getFullYear());\n    if (whatFunction === \"totalGamesOwned\") {\n      return numGames;\n    } else if (whatFunction === \"dmgPerGame\") {\n      return numGames > 0 ? netDamage / numGames : Infinity;\n    } else if (whatFunction === \"dmgPerPlay\") {\n      return totalPlays > 0 ? netDamage / totalPlays : Infinity;\n    } else if (whatFunction === \"dmgPerMonth\") {\n      return mthLength > 0 ? netDamage / mthLength : Infinity;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"analytics-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"all-games-owned\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Games Owned: \", cardFunctions(props.allGames, \"totalGamesOwned\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dmg-per-game\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Damage / Game: \", cardFunctions(props.allGames, \"dmgPerGame\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dmg-per-mth\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Average Monthly Damage: \", cardFunctions(props.allGames, \"dmgPerMonth\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dmg-per-play\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Damage / Play: \", cardFunctions(props.allGames, \"dmgPerPlay\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_c = Analytics;\nexport default Analytics;\nvar _c;\n$RefreshReg$(_c, \"Analytics\");","map":{"version":3,"names":["Header","jsxDEV","_jsxDEV","Analytics","props","cardFunctions","arrayObj","whatFunction","numGames","length","totalDamage","reduce","damage","element","buyprice","totalHeal","sellprice","netDamage","totalPlays","playcount","initialPurchaseDate","buydate","maxBuyDate","maxDate","minBuyDate","minDate","mthLength","Date","getMonth","getFullYear","Infinity","children","fileName","_jsxFileName","lineNumber","columnNumber","className","allGames","_c","$RefreshReg$"],"sources":["/Users/andyleonardi/Downloads/GA_course/Project 2 - Boardgames ROI Analytics/boardgame-roi-stats/src/pages/Analytics.jsx"],"sourcesContent":["import Header from \"../components/Header\";\n\nconst Analytics = (props) => {\n  const cardFunctions = (arrayObj, whatFunction) => {\n    let numGames = arrayObj.length;\n    let totalDamage = arrayObj.reduce(\n      (damage, element) => damage + element.buyprice,\n      0\n    );\n    let totalHeal = arrayObj.reduce(\n      (damage, element) => damage + element.sellprice,\n      0\n    );\n    let netDamage = totalDamage - totalHeal;\n    let totalPlays = arrayObj.reduce(\n      (damage, element) => damage + element.playcount,\n      0\n    );\n\n    // For month calculation\n    let initialPurchaseDate = arrayObj[0].buydate;\n    let maxBuyDate = arrayObj.reduce(\n      (maxDate, element) =>\n        maxDate > element.buydate ? maxDate : element.buydate,\n      initialPurchaseDate\n    );\n    let minBuyDate = arrayObj.reduce(\n      (minDate, element) =>\n        minDate > element.buydate ? minDate : element.buydate,\n      initialPurchaseDate\n    );\n    let mthLength =\n      new Date(maxBuyDate).getMonth() -\n      new Date(minBuyDate).getMonth() +\n      12 * (new Date(maxBuyDate).getFullYear() - new Date(minBuyDate).getFullYear());\n\n    if (whatFunction === \"totalGamesOwned\") {\n      return numGames;\n    } else if (whatFunction === \"dmgPerGame\") {\n      return numGames > 0 ? netDamage / numGames : Infinity;\n    } else if (whatFunction === \"dmgPerPlay\") {\n      return totalPlays > 0 ? netDamage / totalPlays : Infinity;\n    } else if (whatFunction === \"dmgPerMonth\") {\n      return mthLength > 0 ? netDamage / mthLength : Infinity;\n    }\n  };\n\n  return (\n    <div>\n      <Header />\n      <div className=\"analytics-container\">\n        <div className=\"all-games-owned\">\n          <p>Total Games Owned: {cardFunctions(props.allGames, \"totalGamesOwned\")}</p>\n        </div>\n        <div className=\"dmg-per-game\">\n          <p>Damage / Game: {cardFunctions(props.allGames, \"dmgPerGame\")}</p>\n        </div>\n        <div className=\"dmg-per-mth\">\n          <p>Average Monthly Damage: {cardFunctions(props.allGames, \"dmgPerMonth\")}</p>\n        </div>\n        <div className=\"dmg-per-play\">\n          <p>Damage / Play: {cardFunctions(props.allGames, \"dmgPerPlay\")}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Analytics;\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAC3B,MAAMC,aAAa,GAAGA,CAACC,QAAQ,EAAEC,YAAY,KAAK;IAChD,IAAIC,QAAQ,GAAGF,QAAQ,CAACG,MAAM;IAC9B,IAAIC,WAAW,GAAGJ,QAAQ,CAACK,MAAM,CAC/B,CAACC,MAAM,EAAEC,OAAO,KAAKD,MAAM,GAAGC,OAAO,CAACC,QAAQ,EAC9C,CACF,CAAC;IACD,IAAIC,SAAS,GAAGT,QAAQ,CAACK,MAAM,CAC7B,CAACC,MAAM,EAAEC,OAAO,KAAKD,MAAM,GAAGC,OAAO,CAACG,SAAS,EAC/C,CACF,CAAC;IACD,IAAIC,SAAS,GAAGP,WAAW,GAAGK,SAAS;IACvC,IAAIG,UAAU,GAAGZ,QAAQ,CAACK,MAAM,CAC9B,CAACC,MAAM,EAAEC,OAAO,KAAKD,MAAM,GAAGC,OAAO,CAACM,SAAS,EAC/C,CACF,CAAC;;IAED;IACA,IAAIC,mBAAmB,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAACe,OAAO;IAC7C,IAAIC,UAAU,GAAGhB,QAAQ,CAACK,MAAM,CAC9B,CAACY,OAAO,EAAEV,OAAO,KACfU,OAAO,GAAGV,OAAO,CAACQ,OAAO,GAAGE,OAAO,GAAGV,OAAO,CAACQ,OAAO,EACvDD,mBACF,CAAC;IACD,IAAII,UAAU,GAAGlB,QAAQ,CAACK,MAAM,CAC9B,CAACc,OAAO,EAAEZ,OAAO,KACfY,OAAO,GAAGZ,OAAO,CAACQ,OAAO,GAAGI,OAAO,GAAGZ,OAAO,CAACQ,OAAO,EACvDD,mBACF,CAAC;IACD,IAAIM,SAAS,GACX,IAAIC,IAAI,CAACL,UAAU,CAAC,CAACM,QAAQ,CAAC,CAAC,GAC/B,IAAID,IAAI,CAACH,UAAU,CAAC,CAACI,QAAQ,CAAC,CAAC,GAC/B,EAAE,IAAI,IAAID,IAAI,CAACL,UAAU,CAAC,CAACO,WAAW,CAAC,CAAC,GAAG,IAAIF,IAAI,CAACH,UAAU,CAAC,CAACK,WAAW,CAAC,CAAC,CAAC;IAEhF,IAAItB,YAAY,KAAK,iBAAiB,EAAE;MACtC,OAAOC,QAAQ;IACjB,CAAC,MAAM,IAAID,YAAY,KAAK,YAAY,EAAE;MACxC,OAAOC,QAAQ,GAAG,CAAC,GAAGS,SAAS,GAAGT,QAAQ,GAAGsB,QAAQ;IACvD,CAAC,MAAM,IAAIvB,YAAY,KAAK,YAAY,EAAE;MACxC,OAAOW,UAAU,GAAG,CAAC,GAAGD,SAAS,GAAGC,UAAU,GAAGY,QAAQ;IAC3D,CAAC,MAAM,IAAIvB,YAAY,KAAK,aAAa,EAAE;MACzC,OAAOmB,SAAS,GAAG,CAAC,GAAGT,SAAS,GAAGS,SAAS,GAAGI,QAAQ;IACzD;EACF,CAAC;EAED,oBACE5B,OAAA;IAAA6B,QAAA,gBACE7B,OAAA,CAACF,MAAM;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVjC,OAAA;MAAKkC,SAAS,EAAC,qBAAqB;MAAAL,QAAA,gBAClC7B,OAAA;QAAKkC,SAAS,EAAC,iBAAiB;QAAAL,QAAA,eAC9B7B,OAAA;UAAA6B,QAAA,GAAG,qBAAmB,EAAC1B,aAAa,CAACD,KAAK,CAACiC,QAAQ,EAAE,iBAAiB,CAAC;QAAA;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzE,CAAC,eACNjC,OAAA;QAAKkC,SAAS,EAAC,cAAc;QAAAL,QAAA,eAC3B7B,OAAA;UAAA6B,QAAA,GAAG,iBAAe,EAAC1B,aAAa,CAACD,KAAK,CAACiC,QAAQ,EAAE,YAAY,CAAC;QAAA;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChE,CAAC,eACNjC,OAAA;QAAKkC,SAAS,EAAC,aAAa;QAAAL,QAAA,eAC1B7B,OAAA;UAAA6B,QAAA,GAAG,0BAAwB,EAAC1B,aAAa,CAACD,KAAK,CAACiC,QAAQ,EAAE,aAAa,CAAC;QAAA;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1E,CAAC,eACNjC,OAAA;QAAKkC,SAAS,EAAC,cAAc;QAAAL,QAAA,eAC3B7B,OAAA;UAAA6B,QAAA,GAAG,iBAAe,EAAC1B,aAAa,CAACD,KAAK,CAACiC,QAAQ,EAAE,YAAY,CAAC;QAAA;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACG,EAAA,GAhEInC,SAAS;AAkEf,eAAeA,SAAS;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}