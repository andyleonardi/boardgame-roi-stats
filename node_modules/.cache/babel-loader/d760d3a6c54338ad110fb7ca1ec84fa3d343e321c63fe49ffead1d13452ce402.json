{"ast":null,"code":"var _jsxFileName = \"/Users/andyleonardi/Downloads/GA_course/Project 2 - Boardgames ROI Analytics/boardgame-roi-stats/src/App.js\",\n  _s = $RefreshSig$();\n// Import packages & hooks\nimport { Routes, Route } from \"react-router-dom\";\nimport { useSate, useEffect, useState } from \"react\";\nimport { xml2js } from \"xml-js\";\n\n// Import components\nimport Header from \"./components/Header\";\nimport Homepage from \"./pages/Homepage\";\nimport Collections from \"./pages/Collections\";\nimport Analytics from \"./pages/Analytics\";\nimport gamesArr from \"./gameCollection\";\n\n// Import styles\nimport \"./App.css\";\n\n// BGG API Paths\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bggCollectionPath = \"https://api.geekdo.com/xmlapi/collection/\"; // for getting collections\n\nfunction App() {\n  _s();\n  const [bggUserId, setBggUserId] = useState(\"andyleonardi\");\n  const [userBGGData, setUserBGGData] = useState([]);\n\n  // Try to mount API first, but for working version only pull API data when user submit form\n  useEffect(() => {\n    // Because I only want to pull games users buy, I need to pull 3 separate times\n    // Once for Own, second for Previously Owned, third for Preordered\n    // This is because BGG user collection data includes even games that you've never purchased,\n    // but which you've logged as Played, or you've Commented on, etc\n    // Since I only want actual purchases and user's own collection\n    // I needed to only get these 3\n    const collectionPathOwn = `${bggCollectionPath}${bggUserId}?own=1&excludesubtype=boardgameexpansion`;\n    const collectionPathPrevOwn = `${bggCollectionPath}${bggUserId}?prevowned=1&excludesubtype=boardgameexpansion`;\n    const collectionPathPreOrder = `${bggCollectionPath}${bggUserId}?preordered=1&excludesubtype=boardgameexpansion`;\n    const fetchBGGCollectionData = async () => {\n      const responseOwn = await fetch(collectionPathOwn);\n      const responsePrevOwn = await fetch(collectionPathPrevOwn);\n      const responsePreOrder = await fetch(collectionPathPreOrder);\n      const xmlDataOwn = await responseOwn.text();\n      const xmlDataPrevOwn = await responsePrevOwn.text();\n      const xmlDataPreOrder = await responsePreOrder.text();\n      const dataOwn = xml2js(xmlDataOwn, {\n        compact: true,\n        spaces: 4\n      }).items.item;\n      const dataPrevOwn = xml2js(xmlDataPrevOwn, {\n        compact: true,\n        spaces: 4\n      }).items.item;\n      const dataPreOrder = xml2js(xmlDataPreOrder, {\n        compact: true,\n        spaces: 4\n      }).items.item;\n      console.log(\"Currently owned: \", dataOwn);\n      // console.log(\"Preordered: \", dataPreOrder);\n\n      // Now that we have the collection data from API, we want to get just the relevant fields\n      // We want Name, Status and Numplay\n\n      const reducedOwn = dataOwn.map(({\n        name,\n        numplay,\n        _attributes\n      }) => ({\n        name,\n        numplay,\n        _attributes\n      }));\n      const reducedPrevOwn = dataPrevOwn.map(({\n        name,\n        numplay,\n        _attributes\n      }) => ({\n        name,\n        numplay,\n        _attributes\n      }));\n      const reducedPreOrder = dataPreOrder.map(({\n        name,\n        numplay,\n        _attributes\n      }) => ({\n        name,\n        numplay,\n        _attributes\n      }));\n      const reducedAll = reducedOwn.concat(reducedPrevOwn).concat(reducedPreOrder);\n      console.log(reducedAll);\n\n      // Final thing to do is to set state of userBGGData\n      // Ideally we want only single simple keys, i.e. {name: xxx, playcount: yz, gameID: 123123} \n      // [NBED stopped here]\n\n      // dataOwn.items.item.forEach((e)=>{console.log(`Name: ${e.name._text}, # plays: ${e.numplays._text}. GameID = ${e._attributes.objectid}`)});\n      // console.log(dataPreOrder);\n    };\n\n    fetchBGGCollectionData();\n  }, [bggUserId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Homepage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/collections\",\n          element: /*#__PURE__*/_jsxDEV(Collections, {\n            allGames: gamesArr\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/analytics\",\n          element: /*#__PURE__*/_jsxDEV(Analytics, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"YvpXLCUjQ6X+5Ia3+x5Aum9DSK0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Routes","Route","useSate","useEffect","useState","xml2js","Header","Homepage","Collections","Analytics","gamesArr","jsxDEV","_jsxDEV","bggCollectionPath","App","_s","bggUserId","setBggUserId","userBGGData","setUserBGGData","collectionPathOwn","collectionPathPrevOwn","collectionPathPreOrder","fetchBGGCollectionData","responseOwn","fetch","responsePrevOwn","responsePreOrder","xmlDataOwn","text","xmlDataPrevOwn","xmlDataPreOrder","dataOwn","compact","spaces","items","item","dataPrevOwn","dataPreOrder","console","log","reducedOwn","map","name","numplay","_attributes","reducedPrevOwn","reducedPreOrder","reducedAll","concat","className","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","allGames","_c","$RefreshReg$"],"sources":["/Users/andyleonardi/Downloads/GA_course/Project 2 - Boardgames ROI Analytics/boardgame-roi-stats/src/App.js"],"sourcesContent":["// Import packages & hooks\nimport { Routes, Route } from \"react-router-dom\";\nimport { useSate, useEffect, useState } from \"react\";\nimport { xml2js } from \"xml-js\";\n\n// Import components\nimport Header from \"./components/Header\";\nimport Homepage from \"./pages/Homepage\";\nimport Collections from \"./pages/Collections\";\nimport Analytics from \"./pages/Analytics\";\nimport gamesArr from \"./gameCollection\";\n\n// Import styles\nimport \"./App.css\";\n\n// BGG API Paths\nconst bggCollectionPath = \"https://api.geekdo.com/xmlapi/collection/\"; // for getting collections\n\nfunction App() {\n  const [bggUserId, setBggUserId] = useState(\"andyleonardi\");\n  const [userBGGData, setUserBGGData] = useState([]);\n\n  // Try to mount API first, but for working version only pull API data when user submit form\n  useEffect(() => {\n    // Because I only want to pull games users buy, I need to pull 3 separate times\n    // Once for Own, second for Previously Owned, third for Preordered\n    // This is because BGG user collection data includes even games that you've never purchased,\n    // but which you've logged as Played, or you've Commented on, etc\n    // Since I only want actual purchases and user's own collection\n    // I needed to only get these 3\n    const collectionPathOwn = `${bggCollectionPath}${bggUserId}?own=1&excludesubtype=boardgameexpansion`;\n    const collectionPathPrevOwn = `${bggCollectionPath}${bggUserId}?prevowned=1&excludesubtype=boardgameexpansion`;\n    const collectionPathPreOrder = `${bggCollectionPath}${bggUserId}?preordered=1&excludesubtype=boardgameexpansion`;\n\n    const fetchBGGCollectionData = async () => {\n      const responseOwn = await fetch(collectionPathOwn);\n      const responsePrevOwn = await fetch(collectionPathPrevOwn);\n      const responsePreOrder = await fetch(collectionPathPreOrder);\n\n      const xmlDataOwn = await responseOwn.text();\n      const xmlDataPrevOwn = await responsePrevOwn.text();\n      const xmlDataPreOrder = await responsePreOrder.text();\n\n      const dataOwn = xml2js(xmlDataOwn, { compact: true, spaces: 4 }).items.item;\n      const dataPrevOwn = xml2js(xmlDataPrevOwn, { compact: true, spaces: 4 }).items.item;\n      const dataPreOrder = xml2js(xmlDataPreOrder, { compact: true, spaces: 4 }).items.item;\n      console.log(\"Currently owned: \", dataOwn);\n      // console.log(\"Preordered: \", dataPreOrder);\n      \n      // Now that we have the collection data from API, we want to get just the relevant fields\n      // We want Name, Status and Numplay\n\n      const reducedOwn = dataOwn.map(({name, numplay, _attributes}) => ({name, numplay, _attributes}));\n      const reducedPrevOwn = dataPrevOwn.map(({name, numplay, _attributes}) => ({name, numplay, _attributes}));\n      const reducedPreOrder = dataPreOrder.map(({name, numplay, _attributes}) => ({name, numplay, _attributes}));\n      const reducedAll = reducedOwn.concat(reducedPrevOwn).concat(reducedPreOrder);\n      console.log(reducedAll);\n\n      // Final thing to do is to set state of userBGGData\n      // Ideally we want only single simple keys, i.e. {name: xxx, playcount: yz, gameID: 123123} \n      // [NBED stopped here]\n      \n      // dataOwn.items.item.forEach((e)=>{console.log(`Name: ${e.name._text}, # plays: ${e.numplays._text}. GameID = ${e._attributes.objectid}`)});\n      // console.log(dataPreOrder);\n    };\n\n    fetchBGGCollectionData();\n\n  }, [bggUserId]);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<Homepage />} />\n          <Route\n            path=\"/collections\"\n            element={<Collections allGames={gamesArr} />}\n          />\n          <Route path=\"/analytics\" element={<Analytics />} />\n        </Routes>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}