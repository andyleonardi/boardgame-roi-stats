{"ast":null,"code":"var _jsxFileName = \"/Users/andyleonardi/Downloads/GA_course/Project 2 - Boardgames ROI Analytics/boardgame-roi-stats/src/App.js\",\n  _s = $RefreshSig$();\n// Import packages & hooks\nimport { Routes, Route, Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { xml2js } from \"xml-js\";\n\n// Import components\nimport Header from \"./components/Header\";\nimport Homepage from \"./pages/Homepage\";\nimport Collections from \"./pages/Collections\";\nimport Analytics from \"./pages/Analytics\";\nimport Forms from \"./Forms/Forms\";\n// import gamesArr from \"./gameCollection\";\n\nimport gamesArr from \"./testAppData\"; // TESTING SMALL SAMPLE (HARDCODED)\nimport testBggArr from \"./testAPIData\";\n\n// Import styles\nimport \"./App.css\";\n\n// BGG API Paths\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bggCollectionPath = \"https://api.geekdo.com/xmlapi/collection/\"; // for getting collections\n\n// Function to extract relevant API data\nconst extractRelevantData = obj => {\n  let ownStatus = \"\";\n  if (obj.status._own === 1) {\n    ownStatus = \"Own\";\n  } else if (obj.status._prevowned === 1) {\n    ownStatus = \"Previously Owned\";\n  } else if (obj.status._preordered === 1) {\n    ownStatus = \"Pre-ordered\";\n  }\n  return {\n    name: obj.name._text,\n    playcount: obj.numplays._text,\n    gameID: obj._attributes.objectid,\n    status: ownStatus\n  };\n};\nfunction App() {\n  _s();\n  const [bggUserId, setBggUserId] = useState(\"andyleonardi\");\n  // const [userBGGData, setUserBGGData] = useState([]);\n  const [userBGGData, setUserBGGData] = useState(testBggArr); // TESTING SMALL SAMPLE SET (HARDCODED)\n  const [userCollectionData, setUserCollectionData] = useState(gamesArr);\n  const [requireInputs, setRequireInputs] = useState([]);\n  const [noInputsRequired, setNoInputsRequired] = useState([]);\n  /*\n  // Try to mount API first, but for working version only pull API data when user submit form\n  useEffect(() => {\n    // Because I only want to pull games users buy, I need to pull 3 separate times\n    // Once for Own, second for Previously Owned, third for Preordered\n    // This is because BGG user collection data includes even games that you've never purchased,\n    // but which you've logged as Played, or you've Commented on, etc\n    // Since I only want actual purchases and user's own collection\n    // I needed to only get these 3\n    const collectionPathOwn = `${bggCollectionPath}${bggUserId}?own=1&excludesubtype=boardgameexpansion`;\n    const collectionPathPrevOwn = `${bggCollectionPath}${bggUserId}?prevowned=1&excludesubtype=boardgameexpansion`;\n    const collectionPathPreOrder = `${bggCollectionPath}${bggUserId}?preordered=1&excludesubtype=boardgameexpansion`;\n     console.log(collectionPathOwn);\n     const fetchBGGCollectionData = async () => {\n      const responseOwn = await fetch(collectionPathOwn);\n      const responsePrevOwn = await fetch(collectionPathPrevOwn);\n      const responsePreOrder = await fetch(collectionPathPreOrder);\n       const xmlDataOwn = await responseOwn.text();\n      const xmlDataPrevOwn = await responsePrevOwn.text();\n      const xmlDataPreOrder = await responsePreOrder.text();\n       const dataOwn = xml2js(xmlDataOwn, { compact: true, spaces: 4 }).items;\n      const dataPrevOwn = xml2js(xmlDataPrevOwn, { compact: true, spaces: 4 }).items.item;\n      const dataPreOrder = xml2js(xmlDataPreOrder, { compact: true, spaces: 4 }).items.item;\n      console.log(\"Currently owned: \", dataOwn);\n      // console.log(\"Preordered: \", dataPreOrder);\n       // Now that we have the collection data from API, we want to get just the relevant fields\n      // We want Name, Status and Numplay\n      const reducedOwn = dataOwn.map(\n        ({ name, numplays, status, _attributes }) =>\n          extractRelevantData({ name, numplays, status, _attributes })\n      );\n      const reducedPrevOwn = dataPrevOwn.map(\n        ({ name, numplays, status, _attributes }) =>\n          extractRelevantData({ name, numplays, status, _attributes })\n      );\n      const reducedPreOrder = dataPreOrder.map(\n        ({ name, numplays, status, _attributes }) =>\n          extractRelevantData({ name, numplays, status, _attributes })\n      );\n      const reducedAll = reducedOwn.concat(reducedPrevOwn).concat(reducedPreOrder);\n      console.log(reducedAll);\n       // setUserBGGData(reducedAll);\n       // dataOwn.items.item.forEach((e)=>{console.log(`Name: ${e.name._text}, # plays: ${e.numplays._text}. GameID = ${e._attributes.objectid}`)});\n      // console.log(dataPreOrder);\n    };\n     fetchBGGCollectionData();\n  }, [bggUserId]);\n  */\n\n  // console.log(userBGGData);\n\n  const handleSyncButton = () => {\n    console.log(\"Sync button pressed\");\n    // test arrays gamesArr & testBggArr\n    console.log(\"Test app saved data: \", gamesArr);\n    console.log(\"Test API data: \", testBggArr);\n\n    // This function will need to do the following:\n    // First it will need to compare boardgame names in both arrays, then:\n    // 1. For any records that is in userBGGData that is not in app data,\n    //    add them to app data (this will only take the following obj keys:\n    //    name, status, playcount)\n    //    NOTE: when we compare, we are only interested in getting records in\n    //          userBGGData, and not the other way because theoretically,\n    //          app data should have been synced to the last userBGGData\n    let newRecords = userBGGData.filter(({\n      name: record1\n    }) => !userCollectionData.some(({\n      name: record2\n    }) => record2 === record1)).map(({\n      gameID,\n      ...item\n    }) => item);\n    newRecords.forEach(element => {\n      element.buydate = null;\n      element.buyprice = null;\n      element.selldate = null;\n      element.sellprice = null;\n    });\n    // console.log(newRecords);\n\n    // 2. [OLD] For all matching records (name), update both status & playcount\n    //    [OLD] in app's data with the data from userBGGData\n    // 2. Get all matching name, but different status, i.e. we want to get\n    //    games that were sold between syncs (bgg status = prevowned & app status = own)\n    let updateRecords = userCollectionData.filter(({\n      name: record1,\n      status: stat1\n    }) => userBGGData.some(({\n      name: record2,\n      status: stat2\n    }) => record2 === record1 & stat1 !== stat2 & stat2 === \"Previously Owned\"));\n    updateRecords.forEach(element => {\n      element.status = \"Previously Owned\";\n    });\n    // console.log(updateRecords);\n\n    let inputRequiredRecords = newRecords.concat(updateRecords);\n    inputRequiredRecords.forEach((element, index) => {\n      element.id = index;\n    });\n    // console.log(inputRequiredRecords);\n\n    // The above 2 arrays will contain everything that has changed between syncs\n    // 1) new games, 2) sold games\n    // We will update playcount at a later stage\n\n    // Then open / Link to Forms component where it takes the combined array\n    // and get user to input forms\n\n    // console.log(inputRequiredRecords);\n    setRequireInputs(inputRequiredRecords);\n\n    // Set state of another list where no inputs are required\n    let staticRecords = userCollectionData.filter(({\n      name: record1\n    }) => !inputRequiredRecords.some(({\n      name: record2\n    }) => record2 === record1));\n    // console.log(staticRecords);\n\n    setNoInputsRequired(staticRecords);\n\n    // This will update the values in our app data array\n    // Then, run through new data array.\n    // If there is any missing purchase data, add it to a new array\n    // If there is any missing sell data AND status = prevowned, add it to a new array\n\n    // Finally, Link to Forms component where we will have these new records\n    // and allow user to input values to them\n  };\n\n  // Function to join back with BGG data on playcount & gameID\n  const createUpdatedCollection = (newDataFromCompletedForm, bggData) => {\n    let joinedData = newDataFromCompletedForm.map(newData => ({\n      ...bggData.find(bgg => bgg.name === newData.name && bgg),\n      ...newData\n    }));\n    return joinedData;\n  };\n  const updateDataFromInputs = updatedData => {\n    let newData = noInputsRequired.concat(updatedData);\n    newData.sort((a, b) => {\n      const nameA = a.name.toUpperCase(); // ignore upper and lowercase\n      const nameB = b.name.toUpperCase(); // ignore upper and lowercase\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n      return 0;\n    });\n    setUserCollectionData(createUpdatedCollection(newData, userBGGData));\n    // console.log(\"updated data: \", userCollectionData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Homepage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/collections\",\n          element: /*#__PURE__*/_jsxDEV(Collections, {\n            allGames: userCollectionData,\n            handleSyncButton: handleSyncButton\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/form\",\n          element: /*#__PURE__*/_jsxDEV(Forms, {\n            objArr: requireInputs,\n            updateDataFromInputs: updateDataFromInputs\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/analytics\",\n          element: /*#__PURE__*/_jsxDEV(Analytics, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"f1XHcr0mb/KEiL3FJHnAL4WeM2M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Routes","Route","Link","useEffect","useState","xml2js","Header","Homepage","Collections","Analytics","Forms","gamesArr","testBggArr","jsxDEV","_jsxDEV","bggCollectionPath","extractRelevantData","obj","ownStatus","status","_own","_prevowned","_preordered","name","_text","playcount","numplays","gameID","_attributes","objectid","App","_s","bggUserId","setBggUserId","userBGGData","setUserBGGData","userCollectionData","setUserCollectionData","requireInputs","setRequireInputs","noInputsRequired","setNoInputsRequired","handleSyncButton","console","log","newRecords","filter","record1","some","record2","map","item","forEach","element","buydate","buyprice","selldate","sellprice","updateRecords","stat1","stat2","inputRequiredRecords","concat","index","id","staticRecords","createUpdatedCollection","newDataFromCompletedForm","bggData","joinedData","newData","find","bgg","updateDataFromInputs","updatedData","sort","a","b","nameA","toUpperCase","nameB","className","children","path","fileName","_jsxFileName","lineNumber","columnNumber","allGames","objArr","_c","$RefreshReg$"],"sources":["/Users/andyleonardi/Downloads/GA_course/Project 2 - Boardgames ROI Analytics/boardgame-roi-stats/src/App.js"],"sourcesContent":["// Import packages & hooks\nimport { Routes, Route, Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { xml2js } from \"xml-js\";\n\n// Import components\nimport Header from \"./components/Header\";\nimport Homepage from \"./pages/Homepage\";\nimport Collections from \"./pages/Collections\";\nimport Analytics from \"./pages/Analytics\";\nimport Forms from \"./Forms/Forms\";\n// import gamesArr from \"./gameCollection\";\n\nimport gamesArr from \"./testAppData\"; // TESTING SMALL SAMPLE (HARDCODED)\nimport testBggArr from \"./testAPIData\";\n\n// Import styles\nimport \"./App.css\";\n\n// BGG API Paths\nconst bggCollectionPath = \"https://api.geekdo.com/xmlapi/collection/\"; // for getting collections\n\n// Function to extract relevant API data\nconst extractRelevantData = (obj) => {\n  let ownStatus = \"\";\n\n  if (obj.status._own === 1) {\n    ownStatus = \"Own\";\n  } else if (obj.status._prevowned === 1) {\n    ownStatus = \"Previously Owned\";\n  } else if (obj.status._preordered === 1) {\n    ownStatus = \"Pre-ordered\";\n  }\n\n  return {\n    name: obj.name._text,\n    playcount: obj.numplays._text,\n    gameID: obj._attributes.objectid,\n    status: ownStatus,\n  };\n};\n\nfunction App() {\n  const [bggUserId, setBggUserId] = useState(\"andyleonardi\");\n  // const [userBGGData, setUserBGGData] = useState([]);\n  const [userBGGData, setUserBGGData] = useState(testBggArr); // TESTING SMALL SAMPLE SET (HARDCODED)\n  const [userCollectionData, setUserCollectionData] = useState(gamesArr);\n  const [requireInputs, setRequireInputs] = useState([]);\n  const [noInputsRequired, setNoInputsRequired] = useState([]);\n  /*\n  // Try to mount API first, but for working version only pull API data when user submit form\n  useEffect(() => {\n    // Because I only want to pull games users buy, I need to pull 3 separate times\n    // Once for Own, second for Previously Owned, third for Preordered\n    // This is because BGG user collection data includes even games that you've never purchased,\n    // but which you've logged as Played, or you've Commented on, etc\n    // Since I only want actual purchases and user's own collection\n    // I needed to only get these 3\n    const collectionPathOwn = `${bggCollectionPath}${bggUserId}?own=1&excludesubtype=boardgameexpansion`;\n    const collectionPathPrevOwn = `${bggCollectionPath}${bggUserId}?prevowned=1&excludesubtype=boardgameexpansion`;\n    const collectionPathPreOrder = `${bggCollectionPath}${bggUserId}?preordered=1&excludesubtype=boardgameexpansion`;\n\n    console.log(collectionPathOwn);\n\n    const fetchBGGCollectionData = async () => {\n      const responseOwn = await fetch(collectionPathOwn);\n      const responsePrevOwn = await fetch(collectionPathPrevOwn);\n      const responsePreOrder = await fetch(collectionPathPreOrder);\n\n      const xmlDataOwn = await responseOwn.text();\n      const xmlDataPrevOwn = await responsePrevOwn.text();\n      const xmlDataPreOrder = await responsePreOrder.text();\n\n      const dataOwn = xml2js(xmlDataOwn, { compact: true, spaces: 4 }).items;\n      const dataPrevOwn = xml2js(xmlDataPrevOwn, { compact: true, spaces: 4 }).items.item;\n      const dataPreOrder = xml2js(xmlDataPreOrder, { compact: true, spaces: 4 }).items.item;\n      console.log(\"Currently owned: \", dataOwn);\n      // console.log(\"Preordered: \", dataPreOrder);\n\n      // Now that we have the collection data from API, we want to get just the relevant fields\n      // We want Name, Status and Numplay\n      const reducedOwn = dataOwn.map(\n        ({ name, numplays, status, _attributes }) =>\n          extractRelevantData({ name, numplays, status, _attributes })\n      );\n      const reducedPrevOwn = dataPrevOwn.map(\n        ({ name, numplays, status, _attributes }) =>\n          extractRelevantData({ name, numplays, status, _attributes })\n      );\n      const reducedPreOrder = dataPreOrder.map(\n        ({ name, numplays, status, _attributes }) =>\n          extractRelevantData({ name, numplays, status, _attributes })\n      );\n      const reducedAll = reducedOwn.concat(reducedPrevOwn).concat(reducedPreOrder);\n      console.log(reducedAll);\n\n      // setUserBGGData(reducedAll);\n\n      // dataOwn.items.item.forEach((e)=>{console.log(`Name: ${e.name._text}, # plays: ${e.numplays._text}. GameID = ${e._attributes.objectid}`)});\n      // console.log(dataPreOrder);\n    };\n\n    fetchBGGCollectionData();\n  }, [bggUserId]);\n  */\n\n  // console.log(userBGGData);\n\n  const handleSyncButton = () => {\n    console.log(\"Sync button pressed\");\n    // test arrays gamesArr & testBggArr\n    console.log(\"Test app saved data: \", gamesArr);\n    console.log(\"Test API data: \", testBggArr);\n\n    // This function will need to do the following:\n    // First it will need to compare boardgame names in both arrays, then:\n    // 1. For any records that is in userBGGData that is not in app data,\n    //    add them to app data (this will only take the following obj keys:\n    //    name, status, playcount)\n    //    NOTE: when we compare, we are only interested in getting records in\n    //          userBGGData, and not the other way because theoretically,\n    //          app data should have been synced to the last userBGGData\n    let newRecords = userBGGData\n      .filter(\n        ({ name: record1 }) =>\n          !userCollectionData.some(({ name: record2 }) => record2 === record1)\n      )\n      .map(({ gameID, ...item }) => item);\n    newRecords.forEach((element) => {\n      element.buydate = null;\n      element.buyprice = null;\n      element.selldate = null;\n      element.sellprice = null;\n    });\n    // console.log(newRecords);\n\n    // 2. [OLD] For all matching records (name), update both status & playcount\n    //    [OLD] in app's data with the data from userBGGData\n    // 2. Get all matching name, but different status, i.e. we want to get\n    //    games that were sold between syncs (bgg status = prevowned & app status = own)\n    let updateRecords = userCollectionData.filter(\n      ({ name: record1, status: stat1 }) =>\n        userBGGData.some(\n          ({ name: record2, status: stat2 }) =>\n            (record2 === record1) &\n            (stat1 !== stat2) &\n            (stat2 === \"Previously Owned\")\n        )\n    );\n    updateRecords.forEach((element) => {\n      element.status = \"Previously Owned\";\n    });\n    // console.log(updateRecords);\n\n    let inputRequiredRecords = newRecords.concat(updateRecords);\n    inputRequiredRecords.forEach((element, index) => {\n      element.id = index;\n    });\n    // console.log(inputRequiredRecords);\n\n    // The above 2 arrays will contain everything that has changed between syncs\n    // 1) new games, 2) sold games\n    // We will update playcount at a later stage\n\n    // Then open / Link to Forms component where it takes the combined array\n    // and get user to input forms\n\n    // console.log(inputRequiredRecords);\n    setRequireInputs(inputRequiredRecords);\n\n    // Set state of another list where no inputs are required\n    let staticRecords = userCollectionData.filter(\n      ({ name: record1 }) =>\n        !inputRequiredRecords.some(({ name: record2 }) => record2 === record1)\n    );\n    // console.log(staticRecords);\n\n    setNoInputsRequired(staticRecords);\n\n    // This will update the values in our app data array\n    // Then, run through new data array.\n    // If there is any missing purchase data, add it to a new array\n    // If there is any missing sell data AND status = prevowned, add it to a new array\n\n    // Finally, Link to Forms component where we will have these new records\n    // and allow user to input values to them\n  };\n\n  // Function to join back with BGG data on playcount & gameID\n  const createUpdatedCollection = (newDataFromCompletedForm, bggData) => {\n    let joinedData = newDataFromCompletedForm.map((newData) => ({\n      ...bggData.find((bgg) => bgg.name === newData.name && bgg),\n      ...newData,\n    }));\n    return joinedData;\n  };\n\n  const updateDataFromInputs = (updatedData) => {\n    let newData = noInputsRequired.concat(updatedData);\n    newData.sort((a, b) => {\n      const nameA = a.name.toUpperCase(); // ignore upper and lowercase\n      const nameB = b.name.toUpperCase(); // ignore upper and lowercase\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n      return 0;\n    });\n    setUserCollectionData(createUpdatedCollection(newData, userBGGData));\n    // console.log(\"updated data: \", userCollectionData);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<Homepage />} />\n          <Route\n            path=\"/collections\"\n            element={\n              <Collections\n                allGames={userCollectionData}\n                handleSyncButton={handleSyncButton}\n              />\n            }\n          />\n          <Route\n            path=\"/form\"\n            element={\n              <Forms\n                objArr={requireInputs}\n                updateDataFromInputs={updateDataFromInputs}\n              />\n            }\n          />\n          <Route path=\"/analytics\" element={<Analytics />} />\n        </Routes>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}